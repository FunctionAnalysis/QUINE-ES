{"name":"Quine","tagline":"An Expert System","body":"# Overview of the System\r\nArtificial intelligence applied to cyber security should not be a concern, as long as proper care is placed in writing and executing such an application.  The same can be said of any autonomous tool or application.  The use of the \"intelligence\" aspect in the form of an expert system assumes learning along with continued monitoring and decision making conducted by humans.\r\n\r\nAn expert system (ES) relies on a knowledge based along with the ability to follow algorithms in \"ïf-then\" ruling structures to enable decision making at a level an expert in the field would decide upon.  This application maintains the rule structure and algorithms needed, but no knowledge base is provided, as the cyber security field is primarily seen as more of an \"art\" then science in that the context informs the decision made more than a set procedure to follow.  This application, which shall now be referred to simply as QUINE, uses the ruling structure developed by Ivan Bratko for detecting broken fuses in a substation.  The adaptation of this rule set is directly applied to network monitoring and cyclic port forensics.  Perhaps a predominant feature in any expert system is that it learns.  QUINE possess a feature to enable this in subsequent releases, and also create additions to the knowledge base deployed alongside the release.  Given the delicacy and potential for high-impact results in each decision made by practitioners of cyber security, it is strongly recommended not to let QUINE operate without a \"hand at the helm\" meaning a human should always be the final arbiter of an action proposed by QUINE.  \r\n\r\n## Ok, so how does it work?\r\n\r\nBy equating the variable of “Vuln” for “vulnerable” to the argument or “Args” of [_S1], a request from the user to identify if the port specified is in fact vulnerable is possible. With no human input, the next step in this process is to begin the best first search. \r\n\r\nThe script for the facts in the knowledge base focus on ports and computers along with network protocols.\r\n\r\n    fact:device(input).\r\n    fact:device(udp).\r\n    fact:device(syn).\r\n    fact:device(ipa).\r\n    fact:device(port).\r\n    fact:(connected(input,port)):-fact:(connected(port(2),computer2)).\r\n    fact:(connected(port(3),computer)):-fact:(connected(port(4),computer)).\r\n    parse:connected(syn,udp,ipa):-parse:connected(syn,udp,syn),input(syn,udp,ipa).\r\n    parse:device(syn,udp,ipa).\r\n    parse:device(defines,classification,port).\r\n    parse:(output(classification(syn|X,udp|Y,ipa|Z))):-input(unknown(X,Y,Z)).\r\n\r\nThe best first search script has a modification to enable network monitoring upon completion, and therefore incorporates predicates for port scanning. The principle behind the best first search is that the search algorithms do not act traditionally but instead use approximations for the solution to allow faster calculations.\r\n\r\n\r\n    bagof(syn/ipa).\r\n    goal(_):-goal(n).\r\n    bestf(Vuln,Solution):-expand(Vuln,l(Vuln,0/0),9999,_,yes,Solution).\r\n    bestf([T|_],F):-f(T,F).\r\n    bestf([],9999).\r\n    expand(P,l(N,_),_,_,yes,[N|P]):-goal(N).\r\n    expand(P,Tree,Bound,Tree1,Solved,Solution):-port(P),port(Tree|Bound|Tree1;Solved|Solution).\r\n    expand(P,l(N,_),_,_,yes,[N|P]):-goal(N).\r\n    expand(P,l(N,F/G),Bound,Tree1,Solved,Sol):-F=<Bound,(bagof(M/C),(s(N,M,C) ,\r\n    port(Member|Vuln),(~(Member|Vuln)->[M,P],Succ)),!,succlist(G,Succ,Ts),bestf(Ts,Fl),\r\n\t\t  expand(P,t(N,Fl/G,Ts),Bound,Tree1,Solved,Sol);Solved=0).\r\n    expand(P,t(N,F/G,[T|Ts]),Bound,Tree1,Solved,Sol):-F=<Bound,bestf(Ts,BF),input(Bound,BF,Bound1),\r\n\texpand([N|P],T,Bound1,Tl,Solved1,Sol),continue(P,t(N,F/G,[Tl|Ts]),Bound,Tree1,Solved1,Solved,Sol).\r\n    expand(_,t(_,_,[]),_,_,never,_):-!.\r\n    expand(_,Tree,Bound,Tree,no,_):-f(Tree,F),F>Bound.\r\n\r\n\r\nThe dynamic data exchange (DDE) feature within this software, in combination to the rules shown using best first search actively seeks vulnerabilities through port scans and communication protocols.  The principle factor of the software hinges upon the ability to monitor network communication based upon port access and network protocols. This comes from the use of “port” as a predication of several variables.\r\n\r\n    port(_) :-\r\n    strip_module(port((Module)--> Plain),Module,Plain),\r\n    Plain =.. [Vuln|Args],\r\n    gather_args(Args, Values),\r\n    Goal =.. [Vuln|Values],\r\n    Module:Goal,\r\n    port(port->close).\r\n    port(close):-(rl_write_history(port)).\r\n    port(classification(on_signal(Vuln|Scan,Vuln|Open,Open))):-(parse:output(Scan)).\r\n    port(retractall(Vuln)):-port(Vuln).\r\n    port(retractall(parse:parse(Vuln))):-port(Vuln).\r\n    port(Open|Scan):-('$dde_execute'((port(_)),Scan,Open)).\r\n    ((port(Access;Open)):-('$dde_request'(((Access)),write([vulnerabilities]),(Open),(port(_))))).\r\n    (((port(IP)) :-dde_current_connection((Scan|Vuln),Scan, Vuln),IP)).\r\n    port((_,_)):-'$dde_disconnect'((_,_,_,_)).\r\n\r\nThe ability of the software to isolate useful forensic data along with data relevant to network defense is shown by output which comes from entering the request of “gather_args(X,Y).” in the prolog terminal. The option to trace calls of predicates and variables starts when the user enters “trace.” into the terminal. The following is the listed output from a trace that comes from the gather_args query:\r\n\r\n    X = Y, Y = [] ;\r\n        Redo: (7) gather_args(_G8151722, _G8151723) ? Listinggather_args([], []).\r\n     gather_args([+A|C], [B|D]) :- !,\r\n             unknown(port(A, B)),\r\n             gather_args(C, D).\r\n     gather_args([A|B], [A|C]) :-\r\n             gather_args(B, C).\r\n     gather_args(port(A), port(B)) :-\r\n             on_signal(A, B, _),\r\n             port(A),\r\n             port((B| A)).\r\n     gather_args(file(D, E), G) :-\r\n             '$append'(A, [tuple('All files', *.*)], B),\r\n             A=..[chain|B],\r\n             current_prolog_flag(hwnd, F),\r\n             working_directory(C, C),\r\n             call(get(@display,\r\n                      win_file_name(D,\r\n                                    A,\r\n                                    E,\r\n                                    directory:=C,\r\n                                    owner:=F),\r\n                      G)).\r\n     win_menu:gather_args([], []).\r\n     win_menu:gather_args([+A|C], [B|D]) :- !,\r\n             gather_arg(A, B),\r\n             gather_args(C, D).\r\n     win_menu:gather_args([A|B], [A|C]) :-\r\n             gather_args(B, C).\r\n\r\nThe binding of T0 to [] is a signifier of both the ability to again structure lists from the scan as well as the capability to further refine the use of the best first search by restructuring the software. If required, the ability to set T0 to X from the output listed by the gather_args query, in addition to the [_S1] argument as a binding to a port, the hypothesis of the list resulting is of forensic information associated with that port.\r\n\r\nThe principle behind the infinitely recursive prime lattice structure is a distance function between prime number locations on a natural number line, upon a modified natural number line. The traditional natural number line is a single line where each natural number has an equidistant position.\r\n\r\n    matrix(node(A,B,C),edge([_]),bestf([],9999)):-matrix((node(A,B,C;d(_))),port(A),input(A)).\r\n    matrix(Line,Node,Distance):-edge(Line|Node+Distance).\r\n    matrix(A|Node_x;(B|Node1,(C|Node3)):-edge(A|Node1),edge(B|Node3), edge(C|Node_x)).\r\n    node(d([prime+1=prime])).\r\n    node(d([prime+2=prime])).\r\n    node(d([prime+1=prime])).\r\n    edge(X,Y):-(matrix(lattice,([])|X,Y)).\r\n    edge([Node1,Node2];[(C;Node3)],[_]):-matrix(Node1|_,Node2|C,Node3).\r\n    edge([A,B];[B,C];[C,B]):-node(3),edge([A,B,C]),distance((node + edge =Distance)),matrix(edge,node,Distance).\r\n\r\n## Why call it \"\"QUINE?\"\r\n\r\n### The logician\r\nWillard van Orman Quine was a mathematician and philosopher. He authored several works throughout his life, including an excellent book titled \"Mathematical Logic.\"  Quine is quoted as saying > “it is within science itself, and not in some prior philosophy, that reality is to be identified and described” \r\n\r\nQuine is also known to have married logic and science, a marked difference from his colleagues in the field.\r\n\r\n[SEP Site on Quine - Philosopher](http://plato.stanford.edu/entries/quine/)\r\n\r\n## The use of logic\r\n\r\nSWI-Prolog may be known as a theorem proof system to some, but also has strong applications to artificial intelligence.  Ivan Bratko has written a work on this relationship, and himself was head of an institute which studied and developed A.I.\r\n\r\n[SWI-Prolog Manual](http://www.swi-prolog.org/pldoc/doc_for?object=manual)\r\n[Official SWIPL Site](http://www.swi-prolog.org/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}